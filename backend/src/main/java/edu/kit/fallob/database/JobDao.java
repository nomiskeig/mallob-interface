package edu.kit.fallob.database;

import edu.kit.fallob.dataobjects.JobConfiguration;
import edu.kit.fallob.dataobjects.JobDescription;
import edu.kit.fallob.dataobjects.JobInformation;
import edu.kit.fallob.dataobjects.JobResult;
import edu.kit.fallob.dataobjects.JobStatus;
import edu.kit.fallob.dataobjects.ResultMetaData;
import edu.kit.fallob.dataobjects.SubmitType;
import edu.kit.fallob.springConfig.FallobException;

import java.time.LocalDateTime;
import java.util.List;

/**
 * An interface that represent a data access object for all job relevant data
 * It is responsible for storing all the data that belongs to a job
 * @author Valentin Schenk
 * @version 1.0
 */
public interface JobDao {

    /**
     * saves a job-configuration with some additional data persistently in the database
     * @param configuration the job-configuration that should be saved
     * @param username the name of the user that uploaded the-job configuration
     * @param mallobId the id of the job which was assigned to it by mallob
     * @return the jobId which was generated by the database
     * @throws FallobException if an error occurs while accessing the database
     */
    public int saveJobConfiguration(JobConfiguration configuration, String username, int mallobId) throws FallobException;

    /**
     * saves a job-description persistently
     * @param description the job-description that should be saved
     * @param username the name of the user who uploaded the job-description
     * @return the descriptionId which was assigned by the database
     * @throws FallobException if an error occurs while accessing the database
     */
    public int saveJobDescription(JobDescription description, String username) throws FallobException;

    /**
     * removes the job-description from the storage that was stored the longest out of all job-descriptions
     * @throws FallobException if an error occurs while accessing the database
     */
    public void removeOldestJobDescription() throws FallobException;

    /**
     * removes all job-descriptions from the database and the file system
     * @throws FallobException if an error occurs in the database during the process
     */
    public void removeAllJobDescriptions() throws FallobException;

    /**
     * removes all job related data from the database for the jobs which were submitted before the given time
     * @param time the time from where on the job data is removed from the database
     * @throws FallobException if an error occurs while accessing the database
     */
    public void removeAllJobsBeforeTime(LocalDateTime time) throws FallobException;

    /**
     * gives the ids if all the stored jobs for a user
     * @param username the name of the user whose job-ids should be returned
     * @return an array that contains all the job-ids
     * @throws FallobException if an error occurs while accessing the database
     */
    public int[] getAllJobIds(String username) throws FallobException;

    /**
     * getter for a specific job-description
     * @param descriptionId the id of the job-description that should be returned
     * @return the job-description
     * @throws FallobException if an error occurs while accessing the database or if the description couldn't be found
     */
    public JobDescription getJobDescription(int descriptionId) throws FallobException;

    /**
     * getter for a specific job-configuration
     * @param jobId the id of the job whose configuration should be returned
     * @return the job-configuration
     * @throws FallobException if an error occurs while accessing the database or if the configuration couldn't be found
     */
    public JobConfiguration getJobConfiguration(int jobId) throws FallobException;

    /**
     * returns the status of a specific job
     * @param jobId the id of the job whose status should be returned
     * @return the job-status
     * @throws FallobException if an error occurs while accessing the database or if the job couldn't be found
     */
    public JobStatus getJobStatus(int jobId) throws FallobException;

    /**
     * returns information about a specific job
     * @param jobId the id if the job for which the information should be returned
     * @return the information of the job
     * @throws FallobException if an error occurs while accessing the database or if the job couldn't be found
     */
    public JobInformation getJobInformation(int jobId) throws FallobException;

    /**
     * returns the result of a specific job
     * @param jobId the id of the job whose result should be returned
     * @return the result of the job
     * @throws FallobException if an error occurs while accessing the database or if the job couldn't be found
     */
    public JobResult getJobResult(int jobId) throws FallobException;

    /**
     * updates the status of a job
     * @param jobId the id of the job whose status should be updated
     * @param status the new status of the job
     * @throws FallobException if an error occurs while accessing the database or if the job couldn't be found
     */
    public void updateJobStatus(int jobId, JobStatus status) throws FallobException;

    /**
     * adds a result for a specif job
     * @param jobId the id of the job to which the result should be added
     * @param result the result object of the job
     * @param resultMetaData the object that contains the meta data of the result
     * @throws FallobException if an error occurs while accessing the database or if the job couldn't be found
     */
    public void addJobResult(int jobId, JobResult result, ResultMetaData resultMetaData) throws FallobException;

    /**
     * returns the id of a job from a given mallobId
     * @param mallobId the mallob Id for which the jobId should be returned
     * @return the jobId
     * @throws FallobException if an error occurs while accessing the database or if the job couldn't be found
     */
    public int getJobIdByMallobId(int mallobId) throws FallobException;

    /**
     * returns the mallobId of a job from a given jobId
     * @param jobId the id of the job for which the mallobId should be returned
     * @return the mallobId
     * @throws FallobException if an error occurs while accessing the database or if the job couldn't be found
     */
    public int getMallobIdByJobId(int jobId) throws FallobException;

    /**
     * gives the size of all the job-description files
     * @return the size off all the files in megabytes
     */
    public long getSizeOfAllJobDescriptions();

    /**
     * returns a list with the ids of all the jobs that are running at the current time
     * @return a list that contains all the ids of the jobs
     * @throws FallobException if an error occurs while accessing the database
     */
    public List<Integer> getAllRunningJobs() throws FallobException;
}
